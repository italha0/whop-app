#!/usr/bin/env node

/**
 * Prefetch Emoji Assets Script
 * Downloads and caches emoji assets for offline video rendering
 */

const fs = require('fs');
const path = require('path');
const https = require('https');

// Common emojis used in video content
const COMMON_EMOJIS = [
  'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ',
  'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', 'üòö', 'üòô',
  'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ë', 'ü§ó', 'ü§≠', 'ü§´', 'ü§î',
  'ü§ê', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üòè', 'üòí', 'üôÑ', 'üò¨', 'ü§•',
  'üòî', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢',
  'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨', 'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±',
  'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó', 'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂',
  'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ', 'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±',
  'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑',
  'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üòà', 'üëø', 'üëπ', 'üë∫', 'ü§°', 'üí©',
  'üëª', 'üíÄ', '‚ò†Ô∏è', 'üëΩ', 'üëæ', 'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ',
  'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üòæ', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã',
  'üññ', 'üëå', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ',
  'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', 'üëä', '‚úä', 'ü§õ', 'ü§ú',
  'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™',
  'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂', 'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü¶∑', 'ü¶¥',
  'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üíã', 'ü©∏', 'üë∂', 'üßí', 'üë¶', 'üëß',
  'üßë', 'üë±', 'üë®', 'üßî', 'üë©', 'üßì', 'üë¥', 'üëµ', 'üôç', 'üôé',
  'üôÖ', 'üôÜ', 'üíÅ', 'üôã', 'üßè', 'üôá', 'ü§¶', 'ü§∑', 'üëÆ', 'üïµÔ∏è',
  'üíÇ', 'üë∑', 'ü§¥', 'üë∏', 'üë≥', 'üë≤', 'üßï', 'ü§µ', 'üë∞', 'ü§∞',
  'ü§±', 'üëº', 'üéÖ', 'ü§∂', 'ü¶∏', 'ü¶π', 'üßô', 'üßö', 'üßõ', 'üßú',
  'üßù', 'üßû', 'üßü', 'üíÜ', 'üíá', 'üö∂', 'üßç', 'üßé', 'üë®‚Äçü¶Ø', 'üë©‚Äçü¶Ø',
  'üë®‚Äçü¶º', 'üë©‚Äçü¶º', 'üë®‚Äçü¶Ω', 'üë©‚Äçü¶Ω', 'üèÉ', 'üíÉ', 'üï∫', 'üï¥Ô∏è', 'üëØ',
  'üßñ', 'üßó', 'ü§∫', 'üèá', '‚õ∑Ô∏è', 'üèÇ', 'üèåÔ∏è', 'üèÑ', 'üö£', 'üèä',
  '‚õπÔ∏è', 'üèãÔ∏è', 'üö¥', 'üöµ', 'ü§∏', 'ü§º', 'ü§Ω', 'ü§æ', 'ü§π', 'üßò',
  'üõÄ', 'üõå', 'üë≠', 'üë´', 'üë¨', 'üíè', 'üíë', 'üë™', 'üë®‚Äçüë©‚Äçüëß', 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
  'üë®‚Äçüë©‚Äçüë¶‚Äçüë¶', 'üë®‚Äçüë©‚Äçüëß‚Äçüëß', 'üë®‚Äçüë®‚Äçüë¶', 'üë®‚Äçüë®‚Äçüëß', 'üë®‚Äçüë®‚Äçüëß‚Äçüë¶', 'üë®‚Äçüë®‚Äçüë¶‚Äçüë¶',
  'üë®‚Äçüë®‚Äçüëß‚Äçüëß', 'üë©‚Äçüë©‚Äçüë¶', 'üë©‚Äçüë©‚Äçüëß', 'üë©‚Äçüë©‚Äçüëß‚Äçüë¶', 'üë©‚Äçüë©‚Äçüë¶‚Äçüë¶', 'üë©‚Äçüë©‚Äçüëß‚Äçüëß',
  'üë®‚Äçüë¶', 'üë®‚Äçüë¶‚Äçüë¶', 'üë®‚Äçüëß', 'üë®‚Äçüëß‚Äçüë¶', 'üë®‚Äçüëß‚Äçüëß', 'üë©‚Äçüë¶', 'üë©‚Äçüë¶‚Äçüë¶',
  'üë©‚Äçüëß', 'üë©‚Äçüëß‚Äçüë¶', 'üë©‚Äçüëß‚Äçüëß', 'üó£Ô∏è', 'üë§', 'üë•', 'üë£', 'üêµ',
  'üêí', 'ü¶ç', 'ü¶ß', 'üê∂', 'üêï', 'ü¶Æ', 'üêï‚Äçü¶∫', 'üê©', 'üê∫', 'ü¶ä',
  'ü¶ù', 'üê±', 'üêà', 'üêà‚Äç‚¨õ', 'ü¶Å', 'üêØ', 'üêÖ', 'üêÜ', 'üê¥', 'üêé',
  'ü¶Ñ', 'ü¶ì', 'ü¶å', 'üêÆ', 'üêÇ', 'üêÉ', 'üêÑ', 'üê∑', 'üêñ', 'üêó',
  'üêΩ', 'üêè', 'üêë', 'üêê', 'üê™', 'üê´', 'ü¶ô', 'ü¶í', 'üêò', 'ü¶è',
  'ü¶õ', 'üê≠', 'üêÅ', 'üêÄ', 'üêπ', 'üê∞', 'üêá', 'üêøÔ∏è', 'ü¶î', 'ü¶á',
  'üêª', 'üêª‚Äç‚ùÑÔ∏è', 'üê®', 'üêº', 'ü¶•', 'ü¶¶', 'ü¶®', 'ü¶ò', 'ü¶°', 'üêæ',
  'ü¶É', 'üêî', 'üêì', 'üê£', 'üê§', 'üê•', 'üê¶', 'üêß', 'üïäÔ∏è', 'ü¶Ö',
  'ü¶Ü', 'ü¶¢', 'ü¶â', 'ü¶©', 'ü¶ö', 'ü¶ú', 'üê∏', 'üêä', 'üê¢', 'ü¶é',
  'üêç', 'üê≤', 'üêâ', 'ü¶ï', 'ü¶ñ', 'üê≥', 'üêã', 'üê¨', 'üêü', 'üê†',
  'üê°', 'ü¶à', 'üêô', 'üêö', 'üêå', 'ü¶ã', 'üêõ', 'üêú', 'üêù', 'üêû',
  'ü¶ó', 'üï∑Ô∏è', 'ü¶Ç', 'ü¶ü', 'ü¶†', 'üíê', 'üå∏', 'üíÆ', 'üèµÔ∏è', 'üåπ',
  'ü•Ä', 'üå∫', 'üåª', 'üåº', 'üå∑', 'üå±', 'üå≤', 'üå≥', 'üå¥', 'üåµ',
  'üå∂Ô∏è', 'üçÑ', 'üåæ', 'üíê', 'üå∏', 'üíÆ', 'üèµÔ∏è', 'üåπ', 'ü•Ä', 'üå∫',
  'üåª', 'üåº', 'üå∑', 'üå±', 'ü™¥', 'üå≤', 'üå≥', 'üå¥', 'üåµ', 'üå∂Ô∏è',
  'üçÑ', 'üåæ', 'üíê', 'üå∏', 'üíÆ', 'üèµÔ∏è', 'üåπ', 'ü•Ä', 'üå∫', 'üåª'
];

// Create emoji cache directory
const EMOJI_CACHE_DIR = path.join(__dirname, '..', 'public', 'emoji-cache');

function ensureDirectoryExists(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
}

function getEmojiCodepoint(emoji) {
  return emoji.codePointAt(0).toString(16).toLowerCase();
}

function downloadEmoji(emoji, codepoint) {
  return new Promise((resolve, reject) => {
    const url = `https://twemoji.maxcdn.com/v/latest/svg/${codepoint}.svg`;
    const filePath = path.join(EMOJI_CACHE_DIR, `${codepoint}.svg`);
    
    // Skip if already exists
    if (fs.existsSync(filePath)) {
      console.log(`‚úÖ Emoji ${emoji} already cached`);
      resolve();
      return;
    }
    
    const file = fs.createWriteStream(filePath);
    
    https.get(url, (response) => {
      if (response.statusCode === 200) {
        response.pipe(file);
        file.on('finish', () => {
          file.close();
          console.log(`üì• Downloaded emoji ${emoji} (${codepoint})`);
          resolve();
        });
      } else {
        console.warn(`‚ö†Ô∏è Failed to download emoji ${emoji}: ${response.statusCode}`);
        resolve(); // Don't reject, just skip
      }
    }).on('error', (err) => {
      console.warn(`‚ö†Ô∏è Error downloading emoji ${emoji}:`, err.message);
      resolve(); // Don't reject, just skip
    });
  });
}

async function prefetchEmojis() {
  console.log('üé® Starting emoji prefetch...');
  
  ensureDirectoryExists(EMOJI_CACHE_DIR);
  
  const downloadPromises = COMMON_EMOJIS.map(emoji => {
    const codepoint = getEmojiCodepoint(emoji);
    return downloadEmoji(emoji, codepoint);
  });
  
  await Promise.all(downloadPromises);
  
  console.log(`‚úÖ Emoji prefetch completed! Cached ${COMMON_EMOJIS.length} emojis`);
  console.log(`üìÅ Cache directory: ${EMOJI_CACHE_DIR}`);
}

// Run if called directly
if (require.main === module) {
  prefetchEmojis().catch(console.error);
}

module.exports = { prefetchEmojis, COMMON_EMOJIS };
